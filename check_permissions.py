#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
"""

import json
import sys
from pathlib import Path
from urllib.parse import urlparse

try:
    import requests
    from google.oauth2 import service_account
    from google.auth.transport.requests import Request
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install google-auth google-auth-oauthlib google-auth-httplib2 requests")
    sys.exit(1)


def check_service_account(service_account_path: str = "service_account.json"):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    
    Args:
        service_account_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É service_account.json
    """
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
    with open(service_account_path, 'r') as f:
        service_account_data = json.load(f)
    
    email = service_account_data.get('client_email')
    project_id = service_account_data.get('project_id')
    
    print(f"üìß Email: {email}")
    print(f"üèóÔ∏è  Project ID: {project_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    try:
        credentials = service_account.Credentials.from_service_account_file(
            service_account_path,
            scopes=['https://www.googleapis.com/auth/indexing']
        )
        credentials.refresh(Request())
        print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False
    
    return True


def test_single_url(url: str, service_account_path: str = "service_account.json"):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ URL
    
    Args:
        url: URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        service_account_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É service_account.json
    """
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É URL: {url}")
    
    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        credentials = service_account.Credentials.from_service_account_file(
            service_account_path,
            scopes=['https://www.googleapis.com/auth/indexing']
        )
        credentials.refresh(Request())
        access_token = credentials.token
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {access_token}'
        }
        
        data = {
            'url': url,
            'type': 'URL_UPDATED'
        }
        
        response = requests.post(
            'https://indexing.googleapis.com/v3/urlNotifications:publish',
            headers=headers,
            json=data,
            timeout=30
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ URL —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            print(f"   Notification metadata: {result.get('urlNotificationMetadata', {})}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if response.status_code == 403:
                print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 403:")
                print("   1. –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü –≤ Search Console")
                print("   2. –î–æ–º–µ–Ω –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Search Console")
                print("   3. –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL")
                
                domain = urlparse(url).netloc
                print(f"\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
                print(f"   1. –ó–∞–π–¥–∏—Ç–µ –≤ https://search.google.com/search-console")
                print(f"   2. –î–æ–±–∞–≤—å—Ç–µ –¥–æ–º–µ–Ω {domain} (–µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)")
                print(f"   3. –î–æ–±–∞–≤—å—Ç–µ {credentials.service_account_email} –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞")
        
        return response.status_code == 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False


def check_urls_from_file(urls_file: str, service_account_path: str = "service_account.json"):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ URL-–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
    
    Args:
        urls_file: –§–∞–π–ª —Å URL-–∞–º–∏
        service_account_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É service_account.json
    """
    print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º URL-—ã –∏–∑ —Ñ–∞–π–ª–∞: {urls_file}")
    
    with open(urls_file, 'r', encoding='utf-8') as f:
        urls = [line.strip() for line in f if line.strip()]
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–æ–º–µ–Ω–∞–º
    domains = {}
    for url in urls:
        domain = urlparse(url).netloc
        if domain not in domains:
            domains[domain] = []
        domains[domain].append(url)
    
    print(f"\nüåê –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {len(domains)}")
    for domain, domain_urls in domains.items():
        print(f"   {domain}: {len(domain_urls)} URL-–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π URL –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ –æ–¥–Ω–æ–º—É URL —Å –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞...")
    
    success_count = 0
    total_count = 0
    
    for domain, domain_urls in domains.items():
        test_url = domain_urls[0]
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º {domain} ---")
        
        if test_single_url(test_url, service_account_path):
            success_count += 1
        total_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}")
    print(f"   –ù–µ—É–¥–∞—á–Ω–æ: {total_count - success_count}/{total_count}")
    
    if success_count == 0:
        print(f"\n‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –Ω–µ—É–¥–∞—á–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞!")
    elif success_count < total_count:
        print(f"\n‚ö†Ô∏è  –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤.")
    else:
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω—ã! –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å–µ URL-—ã.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è Google Indexing API"
    )
    
    parser.add_argument(
        '--service-account',
        default='service_account.json',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É service_account.json'
    )
    
    parser.add_argument(
        '--urls-file',
        help='–§–∞–π–ª —Å URL-–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    parser.add_argument(
        '--test-url',
        help='–û–¥–∏–Ω URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        if not check_service_account(args.service_account):
            sys.exit(1)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º URL-—ã
        if args.test_url:
            test_single_url(args.test_url, args.service_account)
        elif args.urls_file:
            check_urls_from_file(args.urls_file, args.service_account)
        else:
            print("\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("   python check_permissions.py --test-url https://example.com")
            print("   python check_permissions.py --urls-file urls.txt")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 